A. SOURCE CODE
//Admin UI//
import streamlit as st
import os
import pickle
from pathlib import Path
import streamlit_authenticator as stauth  
from PIL import Image
import pandas as pd
import warnings

os.system('python generate_keys.py')
df = pd.DataFrame(columns=['name','age','img_path','Contact_no','Location','
email','Match-found','email_sent'])
os.makedirs(os.path.join('data','admin_data','missing_images'),exist_ok=True)
csv_file_path = os.path.join('data','admin_data','missing_data.csv')
if not os.path.isfile(csv_file_path):
    df.to_csv(csv_file_path,index=False)
del df

def load_image(image_file,path_to_save):
    img = Image.open(image_file)
    path_to_save = path_to_save+'.'+img.format.lower()
    img.save(path_to_save)
    return img,path_to_save
#saving the image and data as well
def save_admin_data(img,name,age,num,email,location):
    img_path = os.path.join('data','admin_data','missing_images',f'{name}')
    img_data,img_path = load_image(img,path_to_save=img_path)
    missing_person_data = {'name':name,'age':age,'img_path':img_path,'Contact_no':num,'Location':location,'email':email,'Match-found':'No','email_sent':'No'} 
    df2 = pd.DataFrame(missing_person_data,index=[0])
    csv_path = os.path.join('data','admin_data','missing_data.csv')
    df = pd.read_csv(csv_path)
    # df = df.append(missing_person_data, ignore_index = True).reset_index(drop=True) 
    df = pd.concat([df, df2], ignore_index = True)
    df.to_csv(csv_path,index=False)
    return img_data

# --- ADMIN AUTHENTICATION ---

def get_username(file_path):
    with open(file_path,'r',encoding='utf-8') as f:
        admin_logins = f.readlines()
    admin_logins = [i.strip() for i in admin_logins]
    names = list(filter(lambda x: 'names' in x,admin_logins))
    names = names[0].split('=')[1].strip()
    usernames = list(filter(lambda x: 'usernames' in x,admin_logins))
    usernames = usernames[0].split('=')[1].strip()
    return eval(names),eval(usernames)

names,usernames = get_username('generate_keys.py')

# load hashed passwords
file_path = Path(_file_).parent / "hashed_pw.pkl"
with file_path.open("rb") as file:
    hashed_passwords = pickle.load(file)

authenticator = stauth.Authenticate(names, usernames, hashed_passwords,
    "admin", "abcdef", cookie_expiry_days=0)

name, authentication_status, username = authenticator.login("Login", "main")

if authentication_status == False:
    st.error("Username/password is incorrect")

if authentication_status == None:
    st.warning("Please enter your username and password")

if authentication_status:
    authenticator.logout("Logout", "sidebar")
    page = st.sidebar.radio(label="Menu",options=['Report Missing Person','Reports from Users'])
    if page == "Report Missing Person":
        st.markdown("> Report a Missing Person")
        person_name = st.text_input(label="Name")
        person_image = st.file_uploader("Upload Missing Person Image Here", type=["jpg","jpeg"])
        contact_number = st.number_input(label="Phone Number",value=9769123443)
        age = st.number_input(label="age",min_value=1)
        email = st.text_input(label="Email address")
        location = st.text_input(label="Enter Location")
        report = st.button(label="Report")
        if report:
            img = save_admin_data(person_image,person_name,age,contact_number,email,location)
            st.image(img)
            st.markdown("Missing Data Report Saved") 
    if page == "Reports from Users":
        st.markdown("> Missing Data Reports")
        csv_path = os.path.join('data','admin_data','missing_data.csv')
        df = pd.read_csv(csv_path)
        df = df.drop(columns=['img_path'])
        st.dataframe(df)
//Generate_keys_
import pickle
from pathlib import Path

import streamlit_authenticator as stauth

names = ["Peter Parker", "Rebecca Miller"]
usernames = ["peter", "rebecca"]
passwords = ["123", "1234"]

hashed_passwords = stauth.Hasher(passwords).generate()

file_path = Path(_file_).parent / "hashed_pw.pkl"
with file_path.open("wb") as file:
    pickle.dump(hashed_passwords, file)
http://image_similarity_api.py/
from deepface import DeepFace
def get_distance(img1:str,img2:str):
    result = DeepFace.verify(img1_path = img1, img2_path = img2, distance_metric = 'cosine')
    print(result)
    return result
//user.py
from image_similarity_api import get_distance
import streamlit as st
import os
from PIL import Image
import pandas as pd
import uuid
#used for unique string
import warnings
from send_mail import SendMail
import requests

os.makedirs(os.path.join('data','user_data','found_images'),exist_ok=True)
th = 0.8
#location tracking is done using ip 
def gps_tracker():
    r = requests.get('https://ipinfo.io/?token=6c098641e84c13')
    return r.json()
#creates a function tom show the image and save the image
def load_image(image_file,path_to_save,save=False):
    img = Image.open(image_file)
    if save:
        img.save(path_to_save)
    return img
  #  sening the email
def send_email(num,sender_email,passw,rec_email,name,img,r):
    try:
        # print(r)
        new_mail = SendMail([rec_email], f'Spotted {name}',
                            f"Hey,\nI am attaching the Image of found person.\nMy contact Number:{num}\nAutogenerated Location Details : {r}", 
                            sender_email)
        new_mail.attach_files([img])
        # print(new_mail)
        new_mail.send(passw)
        return True
    except Exception as e:
        print(e)
        return False
    
def verify_email(sender_email,passw):
    try:
        new_mail = SendMail([sender_email], f'Email verification',
                            f"Your email has been verified", 
                            sender_email)
        new_mail.send(passw)
        return True#email verification
    except Exception as e:
        print(e)
        return False
    #verifying the image first we will get the user uploaded image and checks with all the other images in database
def save_images(img,num,email,passw):
    img_path = os.path.join('data','user_data','found_images',f'{str(uuid.uuid4())}.jpeg')
    img_data = load_image(img,path_to_save=img_path,save=True)
    df = pd.read_csv(os.path.join('data','admin_data','missing_data.csv'))
    match_score = 0.5
    match_details = None
    match_idx = None
    flag = 0
    for idx,row in df.iterrows():
        # print(row)
        # if row['Match-found'].lower() == 'no':
        res = get_distance(row['img_path'],img_path)
        print(1-res['distance'])
        if res['verified'] and ((1-res['distance']) > match_score):
            print(row['img_path'])
            match_score = 1-res['distance']
            match_details = row
            match_idx = idx
            flag = 1
    if flag:
        df.at[match_idx, 'Match-found'] = 'Yes'
        df.at[match_idx, 'email_sent'] = 'Yes'
        df.to_csv(os.path.join('data','admin_data','missing_data.csv'),index=False)
        response = gps_tracker()
        status = send_email(num,email,passw,match_details['email'],match_details['name'],img_path,response)
        return status
    return True

#streamlit
page = st.sidebar.radio(label="Menu",options=['Report Sighting','Missing Reports from admin'])
if page == "Report Sighting":
    st.markdown("> Report Sighting of Person")
    st.write("*")
    number = st.text_input(label="Enter Phone Number",value=123456789)
    email = st.text_input(label="Email address")
    passw = st.text_input(label="Email password")
    person_image = st.file_uploader("Upload Sighting Image Here", type=["jpg","jpeg"])
    upload = st.button(label="Upload")
    if upload:
        status = verify_email(email,passw)
        if status:
            status = save_images(person_image,number,email,passw)
            if status:
                st.markdown("> Thank you for reporting. If match found will send email")
            else:
                st.markdown("> Match Found. Please enter correct email address or password")
        else:
            st.markdown("Email or Password Incorrect")
            
if page == 'Missing Reports from admin':
    st.markdown("> Missing Data Reports")
    csv_path = os.path.join('data','admin_data','missing_data.csv')
    df = pd.read_csv(csv_path)
    df = df.drop(columns=['img_path'])
    st.dataframe(df)
